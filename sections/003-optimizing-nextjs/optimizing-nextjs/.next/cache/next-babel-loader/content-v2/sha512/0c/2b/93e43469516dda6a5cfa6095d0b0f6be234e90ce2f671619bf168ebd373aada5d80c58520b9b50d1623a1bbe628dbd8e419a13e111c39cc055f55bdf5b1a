{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Fragment, useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport Head from \"next/head\";\nimport { getFilteredEvents } from \"../../helpers/api-util\";\nimport EventList from \"../../components/events/event-list\";\nimport ResultsTitle from \"../../components/events/results-title\";\nimport Button from \"../../components/ui/button\";\nimport ErrorAlert from \"../../components/ui/error-alert\";\n\nfunction FilteredEventsPage(props) {\n  const {\n    0: loadedEvents,\n    1: setLoadedEvents\n  } = useState();\n  const router = useRouter();\n  const filterData = router.query.slug;\n  const {\n    data,\n    error\n  } = useSWR(\"https://nextjs-course-c81cc-default-rtdb.firebaseio.com/events.json\");\n  useEffect(() => {\n    if (data) {\n      const events = [];\n\n      for (const key in data) {\n        events.push(_objectSpread({\n          id: key\n        }, data[key]));\n      }\n\n      setLoadedEvents(events);\n    }\n  }, [data]);\n\n  if (!loadedEvents) {\n    return /*#__PURE__*/_jsx(\"p\", {\n      className: \"center\",\n      children: \"Loading...\"\n    });\n  }\n\n  const filteredYear = filterData[0];\n  const filteredMonth = filterData[1];\n  const numYear = +filteredYear;\n  const numMonth = +filteredMonth;\n\n  if (isNaN(numYear) || isNaN(numMonth) || numYear > 2030 || numYear < 2021 || numMonth < 1 || numMonth > 12 || error) {\n    return /*#__PURE__*/_jsxs(Fragment, {\n      children: [/*#__PURE__*/_jsx(ErrorAlert, {\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: \"Invalid filter. Please adjust your values!\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsx(Button, {\n          link: \"/events\",\n          children: \"Show All Events\"\n        })\n      })]\n    });\n  }\n\n  const filteredEvents = loadedEvents.filter(event => {\n    const eventDate = new Date(event.date);\n    return eventDate.getFullYear() === numYear && eventDate.getMonth() === numMonth - 1;\n  });\n\n  if (!filteredEvents || filteredEvents.length === 0) {\n    return /*#__PURE__*/_jsxs(Fragment, {\n      children: [/*#__PURE__*/_jsx(ErrorAlert, {\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: \"No events found for the chosen filter!\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"center\",\n        children: /*#__PURE__*/_jsx(Button, {\n          link: \"/events\",\n          children: \"Show All Events\"\n        })\n      })]\n    });\n  }\n\n  const date = new Date(numYear, numMonth - 1);\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsxs(\"title\", {\n        children: [\"Events for \", date]\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: \"This is a meta tag!\"\n      })]\n    }), /*#__PURE__*/_jsx(ResultsTitle, {\n      date: date\n    }), /*#__PURE__*/_jsx(EventList, {\n      items: filteredEvents\n    })]\n  });\n} // export async function getServerSideProps(context) {\n//   const { params } = context;\n//   const filterData = params.slug;\n//   const filteredYear = filterData[0];\n//   const filteredMonth = filterData[1];\n//   const numYear = +filteredYear;\n//   const numMonth = +filteredMonth;\n//   if (\n//     isNaN(numYear) ||\n//     isNaN(numMonth) ||\n//     numYear > 2030 ||\n//     numYear < 2021 ||\n//     numMonth < 1 ||\n//     numMonth > 12\n//   ) {\n//     return {\n//       props: { hasError: true },\n//       // notFound: true,\n//       // redirect: {\n//       //   destination: '/error'\n//       // }\n//     };\n//   }\n//   const filteredEvents = await getFilteredEvents({\n//     year: numYear,\n//     month: numMonth,\n//   });\n//   return {\n//     props: {\n//       events: filteredEvents,\n//       date: {\n//         year: numYear,\n//         month: numMonth,\n//       },\n//     },\n//   };\n// }\n\n\nexport default FilteredEventsPage;","map":null,"metadata":{},"sourceType":"module"}